unit Automatas;


interface

uses
  Classes, SysUtils, tas;
type
  T_Complex=(Id,ConsRel,Oprel);

const
  P_reservadas:array[1..3] of string= ('programa','mientras','leer','variable','fin','cuerpo','escribir','si','sino');  //Agregar las que faltan Xd

Procedure CargarTAS(var tas:T_lista);
Function EsID(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Function EsConsReal(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Function EsOprel(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Function EsOpAsig(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Function EsOpArit(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Function EsCad(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Function EsSimboloEsp(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Procedure PalabrasReservadas(var Base:T_arch; Control:longint; var lexema:string; var tas:T_lista; var exito:boolean );
Procedure ObtenerSigCompLex(var Base:T_arch; Control:longint; var CompLex:string; var lexema:string; var tas:T_lista; var exito:boolean );
implementation
Procedure CargarTAS(var tas:T_lista);
var
 R:T_Dato;
 i:word;
 begin
  for i:=1 to 3 do
      begin
        R.lexema:=Reservadas[i];
        R.compLex:='Reservada'
        cargar(tas,R)
      end;
 end;
 Function EsID(var Base:T_arch; var control:longint; var lexema:string):Boolean;
   Const
    q0=0
    F=[3]
   Type
    Q=0..3;
    Sigma=[Letra,Digito,Otro];
    TDelta=Array[Q..Sigma] of Q;
   Var
    Estado_Actual:Q;
    Delta:TDelta;
    caracter:char;
    nuevo_control:integer;

    Function CarASimb (Car:char):Sigma;
    begin
       Case Car of
            'a'..'z', 'A'..'Z':CarASimb:=Letra;
            '0'..'9':CarASimb:=Digito;
       else
         CarASimb:=Otro
       end;
    end;
begin
  lexema='';
  nuevo_control:=control;
  //Se comienza a cargar la tabla
  Delta[0,Letra]:=1;
  Delta[0,Digito]:=2;
  Delta[0,Otro]:=2;
  Delta[1,Letra]:=1;
  Delta[1,Digito]:=1;
  Delta[1,Otro]:=3;
  Delta[2,Letra]:=2;
  Delta[2,Digito]:=2;
  Delta[2,Otro]:=2;
  Delta[3,Letra]:=3;
  Delta[3,Digito]:=3;
  Delta[3,Otro]:=3;
  //Se comienza a recorrer la cadena
  EstadoActual:=q0;
  while not (Estado_Actual in [2,3])do
        begin
          recuperar_arch(nuevo_control,caracter);
          Estado_Actual:=Delta(Estado_Actual,CarASimb(caracter));
          if Estado_Actual=1 then
             begin
             lexema:=Lexema+caracter;
             inc(nuevo_control);
             end;
          end;
  if (Estado_Actual in F) then
  control:=nuevo_control;
  EsID:=Estado_Actual in F;
end;

 Function EsCad(var Base:T_arch; var control:longint; var lexema:string):Boolean;
    Const
     q0=0
     F=[3]
    Type
     Q=0..4;
     Sigma=[Letra,Digito,comillas,Otro];
     TDelta=Array[Q..Sigma] of Q;
    Var
     Estado_Actual:Q;
     Delta:TDelta;
     caracter:char;
     nuevo_control:integer;

     Function CarASimb (Car:char):Sigma;
     begin
        Case Car of
             'a'..'z', 'A'..'Z':CarASimb:=Letra;
             '0'..'9':CarASimb:=Digito;
             '"':CarAsimb:=Comillas;
        else
          CarASimb:=Otro
        end;
     end;
 begin
   lexema='';
   nuevo_control:=control;
   //Se comienza a cargar la tabla
   Delta[0,Comillas]:=1;
   Delta[0,Letra]:=4;
   Delta[0,Digito]:=4;
   Delta[0,Otro]:=4;
   Delta[1,Comillas]:=3;
   Delta[1,Letra]:=2;
   Delta[1,Digito]:=2;
   Delta[1,Otro]:=2;
   Delta[2,Comillas]:=3;
   Delta[2,Letra]:=2;
   Delta[2,Digito]:=2;
   Delta[2,Otro]:=2;
   Delta[3,Comillas]:=4;
   Delta[3,Letra]:=4;
   Delta[3,Digito]:=4;
   Delta[3,Otro]:=4;
   Delta[4,Comillas]:=4;
   Delta[4,Letra]:=4;
   Delta[4,Digito]:=4;
   Delta[4,Otro]:=4;


   //Se comienza a recorrer la cadena
   EstadoActual:=q0;
   while not (Estado_Actual in [3])do
         begin
           recuperar_arch(nuevo_control,caracter);
           Estado_Actual:=Delta(Estado_Actual,CarASimb(caracter));
           if (Estado_Actual=1) or (Estado_Actual=2) then
              begin
              lexema:=Lexema+caracter;
              inc(nuevo_control);
              end;
           end;
   if (Estado_Actual in F) then
   control:=nuevo_control;
   EsCad:=Estado_Actual in F;
 end;

Function EsConsReal(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Const
    q0=0
    F=[3]
   Type
    Q=0..4;
    Sigma=[Coma,Digito,Otro];
    TDelta=Array[Q..Sigma] of Q;
   Var
    Estado_Actual:Q;
    Delta:TDelta;
    caracter:char;
    nuevo_control:integer;

    Function CarASimb (Car:char):Sigma;
    begin
       Case Car of
            ',':CarASimb:=Coma;
            '0'..'9':CarASimb:=Digito;
       else
         CarASimb:=Otro
       end;
    end;
begin
  lexema='';
  nuevo_control:=control;
  //Se comienza a cargar la tabla
  Delta[0,Coma]:=4;
  Delta[0,Digito]:=1;
  Delta[0,Otro]:=4;
  Delta[1,Coma]:=2;
  Delta[1,Digito]:=1;
  Delta[1,Otro]:=4;
  Delta[2,Coma]:=4;
  Delta[2,Digito]:=3;
  Delta[2,Otro]:=4;
  Delta[3,Coma]:=4;
  Delta[3,Digito]:=3;
  Delta[3,Otro]:=4;
  Delta[4,Coma]:=4;
  Delta[4,Digito]:=4;
  Delta[4,Otro]:=4;
  
  
  //Se comienza a recorrer la cadena
  EstadoActual:=q0;
  while not (Estado_Actual in [3])do
        begin
          recuperar_arch(nuevo_control,caracter);
          Estado_Actual:=Delta(Estado_Actual,CarASimb(caracter));
          if (Estado_Actual=1) or (Estado_Actual=2) then
             begin
             lexema:=Lexema+caracter;
             inc(nuevo_control);
             end;
          end;
  if (Estado_Actual in F) then
  control:=nuevo_control;
  EsConsReal:=Estado_Actual in F;
end;

Function EsOpRel(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Const
   q0=0
   F=[3]     //Consultarle a los pibes
  Type
   Q=0..7;
   Sigma=[Mayor,Menor,Igual];
   TDelta=Array[Q..Sigma] of Q;
  Var
   Estado_Actual:Q;
   Delta:TDelta;
   caracter:char;
   nuevo_control:integer;

   Function CarASimb (Car:char):Sigma;
   begin
      Case Car of
           '<':CarASimb:=Mayor;
           '>':CarASimb:=Menor;
           '=':CarASimb:=Igual;
      end;
   end;
begin
 lexema='';
 nuevo_control:=control;
 //Se comienza a cargar la tabla
 Delta[0,Mayor]:=1;
 Delta[0,Menor]:=2;
 Delta[0,Igual]:=3;
 Delta[1,Menor]:=4;
 Delta[1,Mayor]:=7;
 Delta[1,Igual]:=5;
 Delta[2,Mayor]:=7;
 Delta[2,Menor]:=7;
 Delta[2,Igual]:=6;
 Delta[3,Mayor]:=7;
 Delta[3,Menor]:=7;
 Delta[3,Igual]:=7;
 Delta[4,Mayor]:=7;
 Delta[4,Menor]:=7;
 Delta[4,Igual]:=7;
 Delta[5,Mayor]:=7;
 Delta[5,Menor]:=7;
 Delta[5,Igual]:=7;
 Delta[6,Mayor]:=7;
 Delta[6,Menor]:=7;
 Delta[6,Igual]:=7;
 Delta[7,Mayor]:=7;
 Delta[7,Menor]:=7;
 Delta[7,Igual]:=7;

 //Se comienza a recorrer la cadena
 EstadoActual:=q0;
 while not (Estado_Actual in [7])do
       begin
         recuperar_arch(nuevo_control,caracter);
         Estado_Actual:=Delta(Estado_Actual,CarASimb(caracter));
         if (Estado_Actual=1) or (Estado_Actual=2) or (Estado_Actual=4) or (Estado_Actual=5) or (Estado_Actual=6) then
            begin
            lexema:=Lexema+caracter;
            inc(nuevo_control);
            end;
         end;
 if (Estado_Actual in F) then
 control:=nuevo_control;
 EsConsReal:=Estado_Actual in F;
end;

Function EsOpAsig(var Base:T_arch; var control:longint; var lexema:string):Boolean;
Const
   q0=0
   F=[2]
  Type
   Q=0..3;
   Sigma=[Mayor,Menor,Igual];
   TDelta=Array[Q..Sigma] of Q;
  Var
   Estado_Actual:Q;
   Delta:TDelta;
   caracter:char;
   nuevo_control:integer;

   Function CarASimb (Car:char):Sigma;
   begin
      Case Car of
           '=':CarASimb:=Igual;
      end;
   end;
begin
 lexema='';
 nuevo_control:=control;
 //Se comienza a cargar la tabla
 Delta[0,Igual]:=1;
 Delta[1,Igual]:=2;
 Delta[2,Igual]:=3;
 Delta[3,Igual]:=3;



 //Se comienza a recorrer la cadena
 EstadoActual:=q0;
 while not (Estado_Actual in [3])do
       begin
         recuperar_arch(nuevo_control,caracter);
         Estado_Actual:=Delta(Estado_Actual,CarASimb(caracter));
         if (Estado_Actual=1) then
            begin
            lexema:=Lexema+caracter;
            inc(nuevo_control);
            end;
         end;
 if (Estado_Actual in F) then
 control:=nuevo_control;
 EsConsReal:=Estado_Actual in F;
end;

 Procedure PalabrasReservadas(var Base:T_arch; Control:longint; var lexema:string; var tas:T_lista; var exito:boolean );
var
 dato: T_dato;
 begin
  Primero(tas);
  exito:=false;
  while not(fin(tas)) and (not exito) do
        begin
          Recuperar(tas,dato)
          If (dato.lexema=lexema) and (dato.lexema= 'reservada') then
             begin;
                   exito:= true;
                   CompLexico:= dato.CompLex;
             end;
          Siguiente(tas);
        end;
  end;

 Function EsSimboloEsp(var Base:T_arch; var control:longint; var lexema:string):Boolean;
  var
   simbolo:=char;
   begin
        recuperar_arch(control,caracter);
        if (caracter=' ') or (caracter=#1) or (caracter=#2) or (caracter=#3) or (caracter=#4) or (caracter=#5) or (caracter=#6) or (caracter=#7) or (caracter=#8) or (caracter=#9) or (caracter=#10) or (caracter=#11) or (caracter=#12) or (caracter=#13) or (caracter=#14)  or (caracter=#15) or (caracter=#16) or (caracter=#17) or (caracter=#18) or (caracter=#19) or (caracter=#20) or (caracter=#21) or (caracter=#22) or (caracter=#23) or (caracter=#24) or (caracter=#25) or (caracter=#26) or (caracter=#27) or (caracter=#28) or (caracter=#29) or (caracter=#30) or (caracter=#31)
           begin
                inc(control);
                EsSimboloEsp:= true;
           end
           else   if simbolo='$' then
                  begin
                       EsSimboloEsp:=true;
                       lexema:='$';
                  end;
   end;

Procedure ObtenerSigCompLex(var Base:T_arch; Control:longint; var CompLex:string; var lexema:string; var tas:T_lista; var exito:boolean );
var
 bien:=boolean;
  begin
          If EsID (Base,control,lexema) then
             begin
                  Buscarpalabrareservada(Base,Control,Lexema,CompLex,tas,Bien);
                  If not (bien)
                     begin
                          CompLex:= 'Identificador'
                          AgregarAtas(Lexema,tas,CompLex);
                     end
                     else
                     begin
                          writeln(Lexema,'');
                          writeln(CompLex);
                     end
             end;
          else if EsConsReal(Base,control,lexema) then
                     begin
                          CompLex:= 'ConsReal'
                          AgregarAtas(Lexema,tas,CompLex);
                     end
           else if EsOprel(Base,control,lexema) then
                     begin
                          CompLex:= 'OpRel'
                          AgregarAtas(Lexema,tas,CompLex);
                     end
           else if EsOpAsig(Base,control,lexema) then
                     begin
                          CompLex:= 'OpAsig'
                          AgregarAtas(Lexema,tas,CompLex);
                     end
           else if EsOpArit(Base,control,lexema) then
           begin
                CompLex:= 'OpArit'
                AgregarAtas(Lexema,tas,CompLex);
           end
           else if EsCad(Base,control,lexema) then
           begin
                CompLex:= 'Cad'
                AgregarAtas(Lexema,tas,CompLex);
           end
           else if EsSimboloEsp(Base,control,lexema) then
           begin
                If lexema= '$' then
                exito:=true;
                CompLex:= 'SimboloEsp'
                AgregarAtas(Lexema,tas,CompLex);
           end
  end;

end.

